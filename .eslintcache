[{"C:\\academy\\academyexcellenceweb\\src\\index.js":"1","C:\\academy\\academyexcellenceweb\\src\\App.js":"2","C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js":"3","C:\\academy\\academyexcellenceweb\\src\\aws-exports.js":"4","C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js":"5","C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js":"6","C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js":"7","C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js":"8","C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js":"9","C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js":"10","C:\\academy\\academyexcellenceweb\\src\\Question.js":"11","C:\\academy\\academyexcellenceweb\\src\\DisplayStatus.js":"12","C:\\academy\\academyexcellenceweb\\src\\DisplayTimer.js":"13"},{"size":626,"mtime":1610427094433,"results":"14","hashOfConfig":"15"},{"size":540,"mtime":1610427094412,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1610427094446,"results":"17","hashOfConfig":"15"},{"size":487,"mtime":1610427094429,"results":"18","hashOfConfig":"15"},{"size":305,"mtime":1610427094435,"results":"19","hashOfConfig":"15"},{"size":4661,"mtime":1610427094441,"results":"20","hashOfConfig":"15"},{"size":4487,"mtime":1610427094440,"results":"21","hashOfConfig":"15"},{"size":2514,"mtime":1610427094436,"results":"22","hashOfConfig":"15"},{"size":3549,"mtime":1610427094439,"results":"23","hashOfConfig":"15"},{"size":6155,"mtime":1610427094424,"results":"24","hashOfConfig":"15"},{"size":7105,"mtime":1610620291554,"results":"25","hashOfConfig":"15"},{"size":3995,"mtime":1610536689419,"results":"26","hashOfConfig":"15"},{"size":2096,"mtime":1610791732916,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1x9z1w5",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"C:\\academy\\academyexcellenceweb\\src\\index.js",[],["59","60"],"C:\\academy\\academyexcellenceweb\\src\\App.js",[],"C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js",[],"C:\\academy\\academyexcellenceweb\\src\\aws-exports.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js",[],"C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js",["61","62","63"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n\r\nexport default function QuestionHeader(props) {\r\n  const classes = useStyles();\r\n  const [selectedSubject, setSelectedSubject] = React.useState('');\r\n  const [subjectDetails,setSubjectDetails] = React.useState([]);\r\n  const [subjectData,setSubjectData] = React.useState([]);\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [chapterLoaded, setChapterLoaded] = React.useState(false);\r\n  const [questionSetLoaded, setQuestionSetLoaded] = React.useState(false);\r\n  const [questionSet, setQuestionSet] = React.useState([]);\r\n  const [subjectList, setSubjectList] = React.useState([]);\r\n  const [chapterList, setChapterList] = React.useState([]);\r\n  const [selectedChapter, setSelectedChapter] = React.useState([]);\r\n  const [selectedQuestionSet, setSelectedQuestionSet] = React.useState([]);\r\n\r\n  const loading = loaded && subjectList.length === 0;\r\n  const chapterLoading = chapterLoaded && chapterList.length === 0;\r\n  const questionSetLoading = questionSetLoaded && questionSet != null && questionSet.length === 0;\r\n\r\n\r\n  const populateChapter = (subject,value) => {\r\n   setSelectedSubject(value.id);\r\n   for(var k in subjectList) {\r\n      if (subjectList[k].id === selectedSubject){\r\n          setChapterList(subjectList[k].chapterList);\r\n      }\r\n   }\r\n  };\r\n\r\n  function displayQuestionSet(e) {\r\n    e.preventDefault();\r\n    if (selectedQuestionSet !== null && selectedQuestionSet !== ''){\r\n      props.onQuestionSetSelected(true,selectedQuestionSet);\r\n    }else{\r\n      props.onQuestionSetSelected(false,selectedQuestionSet);\r\n\r\n    }\r\n  }\r\n\r\n  const populateQuestionSet = (chapter, value) => {\r\n    setSelectedChapter(value.id);\r\n    for(var k in chapterList) {\r\n       if (chapterList[k].id === selectedChapter){\r\n           setQuestionSet(chapterList[k].questionset);\r\n       }\r\n    }\r\n    //setFormData({headerPopulated: true });\r\n  }\r\n\r\n  const selectQuestionSet = (question,value) => {\r\n   setSelectedQuestionSet(value.id);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n  (async () => {\r\n    if(subjectData != null && subjectData.length === 0){\r\n    const response = await fetch('https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getAllClassDetails?board=1');\r\n    await sleep(1e3);\r\n    const subjectData = await response.json();\r\n    if (subjectData.length > 0){\r\n      setSubjectDetails(subjectData);\r\n      setSubjectList(subjectData[0].subjectList);\r\n    }\r\n  }})();\r\n}, [loading]);\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      <Autocomplete\r\n      id=\"subject-list\"\r\n      style={{ width: 200 }}\r\n      open={loaded}\r\n      onOpen={() => {\r\n        setLoaded(true);\r\n      }}\r\n      onClose={() => {\r\n        setLoaded(false);\r\n      }}\r\n      getOptionSelected={(subject, value) => {populateChapter(subject,value); return subject.id === value.id}}\r\n      getOptionLabel={(subject) => subject.name}\r\n      options={subjectList}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Subject\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    </FormControl>\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n    <Autocomplete\r\n    id=\"chapter-list\"\r\n    style={{ width: 200 }}\r\n    open={chapterLoaded}\r\n    onOpen={() => {\r\n       setChapterLoaded(true);\r\n    }}\r\n    onClose={() => {\r\n      setChapterLoaded(false);\r\n    }}\r\n    getOptionSelected={(chapter, value) => { populateQuestionSet(chapter,value); return chapter.id === value.id}}\r\n    getOptionLabel={(chapter) => chapter.name}\r\n    options={chapterList}\r\n    loading={chapterLoading}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        label=\"Chapter\"\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          endAdornment: (\r\n            <React.Fragment>\r\n              {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n              {params.InputProps.endAdornment}\r\n            </React.Fragment>\r\n          ),\r\n        }}\r\n      />\r\n    )}\r\n  />\r\n  </FormControl>\r\n  <FormControl variant=\"outlined\" className={classes.formControl}>\r\n  <Autocomplete\r\n  id=\"questionSet-list\"\r\n  style={{ width: 260 }}\r\n  open={questionSetLoaded}\r\n  onOpen={() => {\r\n     setQuestionSetLoaded(true);\r\n  }}\r\n  onClose={() => {\r\n    setQuestionSetLoaded(false);\r\n  }}\r\n  getOptionSelected={(questionSet, value) => {selectQuestionSet(questionSet,value); return questionSet.id === value.id}}\r\n  getOptionLabel={(questionSet) => questionSet.name}\r\n  options={questionSet}\r\n  loading={questionSetLoading}\r\n  renderInput={(params) => (\r\n    <TextField\r\n      {...params}\r\n      label=\"Question Set\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        ...params.InputProps,\r\n        endAdornment: (\r\n          <React.Fragment>\r\n            {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n            {params.InputProps.endAdornment}\r\n          </React.Fragment>\r\n        ),\r\n      }}\r\n    />\r\n  )}\r\n/>\r\n</FormControl>\r\n\r\n    <Button variant=\"contained\" color=\"primary\" onClick = {displayQuestionSet}>Start</Button>\r\n    </div>\r\n  );\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\Question.js",["64","65","66","67","68","69","70","71","72"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport DisplayStatus from './DisplayStatus.js';\r\nimport DisplayTimer from './DisplayTimer.js';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function Question(props) {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('');\r\n  const [error, setError] = React.useState(false);\r\n  const [helperText, setHelperText] = React.useState('Choose wisely');\r\n  const [helperTextone, setHelperTextone] = React.useState(' ');\r\n  const [helperTextcorrect, setHelperTextcorrect] = React.useState(' ');\r\n  const [helperTextwrong, setHelperTextwrong] = React.useState(' ');\r\n  //const [state, setState] = React.useState(true);\r\n  const [showText, setShowText] = React.useState(true);\r\n  const [questionIndex, setQuestionIndex] = React.useState(0);\r\n  const [correctAns, setCorrectAns] = React.useState(0);\r\n  const [wrongAns, setWrongAns] = React.useState(0);\r\n  const [selected, setSelected] = React.useState();\r\n  const [questionAnswer,setQuestionAnswer] = React.useState(['']);\r\n  const [questionDetails, setQuestionDetails] = React.useState([]);\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n\r\n\r\n\r\nReact.useEffect(() => {\r\n  fetch(\"https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getQuestionSet?questionSet=\" + props.questionSet)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        setQuestionDetails(result.questionList);\r\n        setIsLoaded(true);\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        setIsLoaded(false);\r\n        alert(error);\r\n        alert(\"https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getQuestionSet?questionSet=\" + props.questionSet);\r\n      }\r\n    )\r\n},[])\r\n\r\n\r\n  const prevNextQuestion = (event, newValue) => {\r\n      if (newValue === 'next') {\r\n        if (questionIndex + 1 < questionDetails.length){\r\n          setQuestionIndex(questionIndex + 1);\r\n          setHelperText(' '); /** reset the value of setHelperText for next icon arrow*/\r\n          setError(false);\r\n        }\r\n      }\r\n      if (newValue === 'previous') {\r\n        if (questionIndex > 0){\r\n          setQuestionIndex(questionIndex - 1);\r\n        }\r\n        if (value === 'Y'){\r\n          if (correctAns > 0){\r\n            setCorrectAns(correctAns - 1);\r\n          }\r\n        }\r\n        if (value === 'N'){\r\n          if (wrongAns > 0){\r\n            setWrongAns(wrongAns - 1);\r\n          }\r\n        }\r\n\r\n      }\r\n      if (questionAnswer.length === questionIndex) {\r\n        questionAnswer[questionIndex] = '';\r\n      }\r\n\r\n    };\r\n\r\n  const selectAnswer = (event) => {\r\n    setValue(event.target.value);\r\n    setHelperText(' ');\r\n    setError(false);\r\n    questionAnswer[questionIndex] = event.target.value;\r\n    setQuestionAnswer(questionAnswer)\r\n    var answered = 0;\r\n    for (var i = 0; i<questionAnswer.length ; i++){\r\n      if (questionAnswer[i] !== ''){\r\n        answered = answered + 1;\r\n      }\r\n    }\r\n    setProgress((answered/questionDetails.length)*100);\r\n\r\n  };\r\n\r\n  const checkAnswer = (event) => {\r\n    event.preventDefault();\r\n    if (value === 'Y') {\r\n      if (correctAns + 1 <= questionDetails.length){\r\n            setCorrectAns(correctAns + 1);\r\n          }\r\n      setHelperText('Correct!');\r\n      setError(false);\r\n    } else if (value === 'N') {\r\n      if (wrongAns + 1 <= questionDetails.length){\r\n           setWrongAns(wrongAns + 1);\r\n         }\r\n      setHelperText('Sorry, wrong answer!');\r\n      setError(true);\r\n    } else {\r\n      setHelperText('Please select an option.');\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const checkAnsweras = (event) => {\r\n    event.preventDefault();\r\n    setHelperTextone('Total Questions Attemt:');\r\n    setHelperTextcorrect('Correct Answer:');\r\n    setHelperTextwrong('Wrong Answer:');\r\n    setShowText(false);\r\n  };\r\n\r\n  if (!isLoaded) {\r\n       return <div>Loading...</div>;\r\n     } else {\r\n    return (\r\n    <div className={classes.root}>\r\n    <DisplayTimer />\r\n    <LinearProgressWithLabel value={progress} />\r\n    <form onSubmit={checkAnswer}>\r\n      <FormControl component=\"fieldset\" error={error} className={classes.formControl}>\r\n        <FormLabel component=\"legend\">{questionDetails[questionIndex].question}</FormLabel>\r\n        <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={questionAnswer[questionIndex]} onChange={selectAnswer}>\r\n          <FormControlLabel value={questionDetails[questionIndex].options[0].correct} control={<Radio />} label={questionDetails[questionIndex].options[0].option} />\r\n          <FormControlLabel value={questionDetails[questionIndex].options[1].correct} control={<Radio />} label={questionDetails[questionIndex].options[1].option} />\r\n        </RadioGroup>\r\n        <FormHelperText>{helperText}</FormHelperText>\r\n        <DisplayStatus questionList = {questionDetails} currentIndex = {questionIndex}/>\r\n      </FormControl>\r\n\r\n    </form>\r\n    <BottomNavigation value={value} onChange={prevNextQuestion} className={classes.root}>\r\n        <BottomNavigationAction label=\"Previous\" value=\"previous\" icon={<ArrowBackIosIcon />}/>\r\n        <BottomNavigationAction label=\"Next\" value=\"next\" icon={<ArrowForwardIosIcon />} />\r\n      </BottomNavigation>\r\n    </div>\r\n  );\r\n}\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\DisplayStatus.js",["73","74"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  section2: {\r\n    margin: theme.spacing(2),\r\n  }\r\n}));\r\n\r\nexport default function Question(props) {\r\n  const classes = useStyles();\r\n  const [completedExam, setCompletedExam] = React.useState(false);\r\n  const [openConfirmation, setOpenConfirmation] = React.useState(false);\r\n\r\n  const displayConfirmation = () => {\r\n      setOpenConfirmation(true);\r\n    };\r\n\r\n    const closeConfirmation = () => {\r\n      setOpenConfirmation(false);\r\n    };\r\n\r\n\r\n  const confirmExamSubmission = () =>{\r\n     setCompletedExam(true);\r\n  }\r\n\r\n  function createData(name, count) {\r\n    return { name, count };\r\n  }\r\n\r\n  const rows = [\r\n    createData('Total Question', props.questionList.length),\r\n    createData('Question Answered',props.questionList.length),\r\n    createData('Question Skipped', props.questionList.length),\r\n    createData('Correct Answer', props.questionList.length),\r\n    createData('Wrong Answer', 0),\r\n    createData(\"Grade\", 'Pass')\r\n  ];\r\n\r\n  React.useEffect(() => {\r\n  },[])\r\nif(completedExam){\r\n  return (\r\n    <div className={classes.root}>\r\n\r\n    <hr/>\r\n      <Typography gutterBottom variant=\"body1\">\r\n          <b>Result</b>\r\n        </Typography>\r\n   <TableContainer component={Paper}>\r\n     <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n       <TableHead>\r\n       </TableHead>\r\n       <TableBody>\r\n         {rows.map((row) => (\r\n           <TableRow key={row.name}>\r\n             <TableCell component=\"th\" scope=\"row\">\r\n               {row.name}\r\n             </TableCell>\r\n             <TableCell align=\"right\">{row.count}</TableCell>\r\n            </TableRow>\r\n         ))}\r\n       </TableBody>\r\n     </Table>\r\n   </TableContainer>\r\n   </div>\r\n );\r\n}\r\nif ((props.currentIndex + 1== props.questionList.length) && !completedExam ) {\r\nreturn (\r\n    <div className={classes.root}>\r\n    <form>\r\n      <Button variant=\"outlined\" color=\"primary\" className={classes.button} onClick={displayConfirmation}>Finish Exam</Button>\r\n    </form>\r\n    <Dialog\r\n        open={openConfirmation}\r\n        onClose={closeConfirmation}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Confirmation - Submission\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Ary you to submit the examination? You will not be able to edit the answer after submisstion.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={confirmExamSubmission} color=\"primary\">\r\n            Confirm\r\n          </Button>\r\n          <Button onClick={closeConfirmation} color=\"primary\" autoFocus>\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}else{\r\n  return(\r\n  <div className={classes.root}></div>\r\n)\r\n}\r\n\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\DisplayTimer.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './App.css';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  section2: {\r\n    margin: theme.spacing(2),\r\n  }\r\n}));\r\n\r\nexport default function Question(props) {\r\n  const [seconds, setSeconds] = React.useState(0)\r\n  const [minutes, setMinutes] = React.useState(30)\r\n\r\n\r\n\r\n  function updateTime() {\r\n    if (minutes == 0 && seconds == 0) {\r\n      alert(\"Please Complete The Exam.\");\r\n    }\r\n    else {\r\n      if (seconds == 0) {\r\n        setMinutes(minutes => minutes - 1);\r\n        setSeconds(59);\r\n      } else {\r\n        setSeconds(seconds => seconds - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    // use set timeout and be confident because updateTime will cause rerender\r\n    // rerender mean re call this effect => then it will be similar to how setinterval works\r\n    // but with easy to understand logic\r\n    const token = setTimeout(updateTime, 1000)\r\n\r\n    return function cleanUp() {\r\n      clearTimeout(token);\r\n    }\r\n  })\r\n\r\n\r\n  return (<p className=\"timer\">\r\nTime: {minutes}:{seconds}\r\n</p>);\r\n}\r\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":29,"column":10,"nodeType":"100","messageId":"101","endLine":29,"endColumn":24},{"ruleId":"98","severity":1,"message":"102","line":30,"column":22,"nodeType":"100","messageId":"101","endLine":30,"endColumn":36},{"ruleId":"103","severity":1,"message":"104","line":89,"column":4,"nodeType":"105","endLine":89,"endColumn":13,"suggestions":"106"},{"ruleId":"98","severity":1,"message":"107","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":14},{"ruleId":"98","severity":1,"message":"108","line":62,"column":10,"nodeType":"100","messageId":"101","endLine":62,"endColumn":23},{"ruleId":"98","severity":1,"message":"109","line":63,"column":10,"nodeType":"100","messageId":"101","endLine":63,"endColumn":27},{"ruleId":"98","severity":1,"message":"110","line":64,"column":10,"nodeType":"100","messageId":"101","endLine":64,"endColumn":25},{"ruleId":"98","severity":1,"message":"111","line":66,"column":10,"nodeType":"100","messageId":"101","endLine":66,"endColumn":18},{"ruleId":"98","severity":1,"message":"112","line":70,"column":10,"nodeType":"100","messageId":"101","endLine":70,"endColumn":18},{"ruleId":"98","severity":1,"message":"113","line":70,"column":20,"nodeType":"100","messageId":"101","endLine":70,"endColumn":31},{"ruleId":"103","severity":1,"message":"114","line":94,"column":3,"nodeType":"105","endLine":94,"endColumn":5,"suggestions":"115"},{"ruleId":"98","severity":1,"message":"116","line":163,"column":9,"nodeType":"100","messageId":"101","endLine":163,"endColumn":22},{"ruleId":"98","severity":1,"message":"117","line":16,"column":8,"nodeType":"100","messageId":"101","endLine":16,"endColumn":15},{"ruleId":"118","severity":1,"message":"119","line":96,"column":28,"nodeType":"120","messageId":"121","endLine":96,"endColumn":30},{"ruleId":"98","severity":1,"message":"107","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":14},{"ruleId":"98","severity":1,"message":"122","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":14},{"ruleId":"98","severity":1,"message":"123","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":21},{"ruleId":"98","severity":1,"message":"124","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":21},{"ruleId":"98","severity":1,"message":"125","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":25},{"ruleId":"98","severity":1,"message":"126","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":19},{"ruleId":"98","severity":1,"message":"127","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":13},{"ruleId":"98","severity":1,"message":"128","line":10,"column":8,"nodeType":"100","messageId":"101","endLine":10,"endColumn":17},{"ruleId":"98","severity":1,"message":"129","line":11,"column":8,"nodeType":"100","messageId":"101","endLine":11,"endColumn":17},{"ruleId":"98","severity":1,"message":"130","line":12,"column":8,"nodeType":"100","messageId":"101","endLine":12,"endColumn":22},{"ruleId":"98","severity":1,"message":"131","line":13,"column":8,"nodeType":"100","messageId":"101","endLine":13,"endColumn":17},{"ruleId":"98","severity":1,"message":"132","line":14,"column":8,"nodeType":"100","messageId":"101","endLine":14,"endColumn":16},{"ruleId":"98","severity":1,"message":"133","line":15,"column":8,"nodeType":"100","messageId":"101","endLine":15,"endColumn":13},{"ruleId":"98","severity":1,"message":"117","line":16,"column":8,"nodeType":"100","messageId":"101","endLine":16,"endColumn":15},{"ruleId":"98","severity":1,"message":"134","line":17,"column":8,"nodeType":"100","messageId":"101","endLine":17,"endColumn":18},{"ruleId":"98","severity":1,"message":"135","line":21,"column":7,"nodeType":"100","messageId":"101","endLine":21,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":43,"column":17,"nodeType":"120","messageId":"121","endLine":43,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":43,"column":33,"nodeType":"120","messageId":"121","endLine":43,"endColumn":35},{"ruleId":"118","severity":1,"message":"119","line":47,"column":19,"nodeType":"120","messageId":"121","endLine":47,"endColumn":21},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'subjectDetails' is assigned a value but never used.","Identifier","unusedVar","'setSubjectData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'subjectData'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'Button' is defined but never used.","'helperTextone' is assigned a value but never used.","'helperTextcorrect' is assigned a value but never used.","'helperTextwrong' is assigned a value but never used.","'showText' is assigned a value but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props.questionSet'. Either include it or remove the dependency array.",["139"],"'checkAnsweras' is assigned a value but never used.","'Divider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [loading, subjectData]",{"range":"144","text":"145"},"Update the dependencies array to be: [props.questionSet]",{"range":"146","text":"147"},[3069,3078],"[loading, subjectData]",[3607,3609],"[props.questionSet]"]