[{"C:\\academy\\academyexcellenceweb\\src\\index.js":"1","C:\\academy\\academyexcellenceweb\\src\\App.js":"2","C:\\academy\\academyexcellenceweb\\src\\aws-exports.js":"3","C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js":"4","C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js":"5","C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js":"6","C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js":"7","C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js":"8","C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js":"9","C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js":"10","C:\\academy\\academyexcellenceweb\\src\\Question.js":"11","C:\\academy\\academyexcellenceweb\\src\\DisplayStatus.js":"12","C:\\academy\\academyexcellenceweb\\src\\DisplayTimer.js":"13"},{"size":626,"mtime":1612272713439,"results":"14","hashOfConfig":"15"},{"size":1148,"mtime":1612344803983,"results":"16","hashOfConfig":"15"},{"size":487,"mtime":1612272713437,"results":"17","hashOfConfig":"15"},{"size":375,"mtime":1612272713450,"results":"18","hashOfConfig":"15"},{"size":305,"mtime":1612272713440,"results":"19","hashOfConfig":"15"},{"size":5963,"mtime":1612272713445,"results":"20","hashOfConfig":"15"},{"size":3093,"mtime":1612272713441,"results":"21","hashOfConfig":"15"},{"size":5420,"mtime":1612272713444,"results":"22","hashOfConfig":"15"},{"size":4495,"mtime":1612272713442,"results":"23","hashOfConfig":"15"},{"size":12830,"mtime":1612448966150,"results":"24","hashOfConfig":"15"},{"size":6413,"mtime":1612448337297,"results":"25","hashOfConfig":"15"},{"size":5909,"mtime":1612272713431,"results":"26","hashOfConfig":"15"},{"size":1064,"mtime":1612450059244,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"fsz9pz",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\academy\\academyexcellenceweb\\src\\index.js",[],["59","60"],"C:\\academy\\academyexcellenceweb\\src\\App.js",[],"C:\\academy\\academyexcellenceweb\\src\\aws-exports.js",[],"C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js",["61","62"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Navigator from './Navigator';\r\nimport Content from './Content';\r\nimport Header from './Header';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright Â© '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}.\r\n    </Typography>\r\n  );\r\n}\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#63ccff',\r\n      main: '#009be5',\r\n      dark: '#006db3',\r\n    },\r\n  },\r\n  typography: {\r\n    h5: {\r\n      fontWeight: 500,\r\n      fontSize: 26,\r\n      letterSpacing: 0.5,\r\n    },\r\n  },\r\n  shape: {\r\n    borderRadius: 8,\r\n  },\r\n  components: {\r\n    MuiTab: {\r\n      defaultProps: {\r\n        disableRipple: true,\r\n      },\r\n    },\r\n  },\r\n  mixins: {\r\n    toolbar: {\r\n      minHeight: 48,\r\n    },\r\n  },\r\n});\r\n\r\ntheme = {\r\n  ...theme,\r\n  components: {\r\n    MuiDrawer: {\r\n      styleOverrides: {\r\n        paper: {\r\n          backgroundColor: '#18202c',\r\n        },\r\n      },\r\n    },\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        label: {\r\n          textTransform: 'none',\r\n        },\r\n        contained: {\r\n          boxShadow: 'none',\r\n          '&:active': {\r\n            boxShadow: 'none',\r\n          },\r\n        },\r\n      },\r\n    },\r\n    MuiTabs: {\r\n      styleOverrides: {\r\n        root: {\r\n          marginLeft: theme.spacing(1),\r\n        },\r\n        indicator: {\r\n          height: 3,\r\n          borderTopLeftRadius: 3,\r\n          borderTopRightRadius: 3,\r\n          backgroundColor: theme.palette.common.white,\r\n        },\r\n      },\r\n    },\r\n    MuiTab: {\r\n      styleOverrides: {\r\n        root: {\r\n          textTransform: 'none',\r\n          margin: '0 16px',\r\n          minWidth: 0,\r\n          padding: 0,\r\n          [theme.breakpoints.up('md')]: {\r\n            padding: 0,\r\n            minWidth: 0,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    MuiIconButton: {\r\n      styleOverrides: {\r\n        root: {\r\n          padding: theme.spacing(1),\r\n        },\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        tooltip: {\r\n          borderRadius: 4,\r\n        },\r\n      },\r\n    },\r\n    MuiDivider: {\r\n      styleOverrides: {\r\n        root: {\r\n          backgroundColor: '#404854',\r\n        },\r\n      },\r\n    },\r\n    MuiListItemText: {\r\n      styleOverrides: {\r\n        primary: {\r\n          fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n      },\r\n    },\r\n    MuiListItemIcon: {\r\n      styleOverrides: {\r\n        root: {\r\n          color: 'inherit',\r\n          marginRight: 0,\r\n          '& svg': {\r\n            fontSize: 20,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    MuiAvatar: {\r\n      styleOverrides: {\r\n        root: {\r\n          width: 32,\r\n          height: 32,\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst drawerWidth = 256;\r\n\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    minHeight: '100vh',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  app: {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    padding: theme.spacing(6, 4),\r\n    background: '#eaeff1',\r\n  },\r\n  footer: {\r\n    padding: theme.spacing(2),\r\n    background: '#eaeff1',\r\n  },\r\n};\r\n\r\nfunction Paperbase(props) {\r\n  const { classes } = props;\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [headerPopulated, setHeaderPopulated] = React.useState(false);\r\n  const [selectedClass,setSelectedClass] = React.useState(\"\");\r\n  const [selectedLeftNavigation,setSelectedLeftNavigation] = React.useState(\"WBBSE\");\r\n  const [selectedLeftNavigationDescription,setSelectedLeftNavigationDescription] = React.useState(\"West Bengal Board of Secondary Education\");\r\n  const [selectHeaderName, setSelectHeaderName] = React.useState('');\r\n  const setNavigation = (navigation,headerName,navigationDescription) => {\r\n      setSelectedLeftNavigation(navigation);\r\n      setSelectHeaderName(headerName);\r\n      setSelectedLeftNavigationDescription(navigationDescription);\r\n      setMobileOpen(false);\r\n    }\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <nav className={classes.drawer}>\r\n          <Hidden smUp implementation=\"js\">\r\n            <Navigator\r\n              PaperProps={{ style: { width: drawerWidth } }}\r\n              variant=\"temporary\"\r\n              open={mobileOpen}\r\n              onClose={handleDrawerToggle}\r\n              setNavigation = {setNavigation}\r\n            />\r\n          </Hidden>\r\n          <Hidden smDown implementation=\"css\">\r\n            <Navigator PaperProps={{ style: { width: drawerWidth } }} setNavigation = {setNavigation}/>\r\n          </Hidden>\r\n        </nav>\r\n        <div className={classes.app}>\r\n          <Header onDrawerToggle={handleDrawerToggle} selectedLeftNavigation = {selectedLeftNavigationDescription} loggedInUser = {props.loggedInUser}/>\r\n          <main className={classes.main}>\r\n            <Content boardHeaderName={selectHeaderName} headerPopulated = {headerPopulated} selectedBoard = {selectedLeftNavigation}  selectedClass = {selectedClass}/>\r\n          </main>\r\n          <footer className={classes.footer}>\r\n            <Copyright />\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nPaperbase.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Paperbase);\r\n","C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js",["63","64","65","66","67","68","69","70"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport DnsRoundedIcon from '@material-ui/icons/DnsRounded';\r\nimport PermMediaOutlinedIcon from '@material-ui/icons/PhotoSizeSelectActual';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n\r\nconst categories = [\r\n  {\r\n    categoryId: 'AcademyBoard',\r\n    categoryDescription: 'Academy Board',\r\n    subCategoryList: [\r\n      {\r\n\r\n        subCategoryId: 'WBBSE',\r\n        subCategory:'WBBSE',\r\n        subCategoryDescription: 'West Bengal Board of Secondary Education',\r\n        active:true\r\n      },\r\n      {\r\n        subCategoryId: 'CBSE',\r\n        subCategory:'CBSE',\r\n        subCategoryDescription: 'Central Board of Secondary Education',\r\n      },\r\n      {\r\n        subCategoryId: 'ICSE',\r\n        subCategory:'ICSE',\r\n        subCategoryDescription: 'Indian Certificate of Secondary Education',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    categoryId: 'Olympiad',\r\n    categoryDescription: 'Olympiad',\r\n    subCategoryList: [\r\n      {\r\n        subCategoryId: 'Olympiad_Mathmatics',\r\n        subCategory:'Mathmatics',\r\n        subCategoryDescription: 'Olympiad - Mathmatics',\r\n      },\r\n      {\r\n        subCategoryId: 'Olympiad_Science',\r\n        subCategory:'Science',\r\n        subCategoryDescription: 'Olympiad - Science',\r\n      },\r\n      {\r\n        subCategoryId: 'Olympiad_Computer',\r\n        subCategory:'Computer',\r\n        subCategoryDescription: 'Olympiad - Computer',\r\n      },\r\n    ],\r\n  }\r\n];\r\n\r\nconst styles = (theme) => ({\r\n  categoryHeader: {\r\n    backgroundColor: '#232f3e',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: theme.palette.common.white,\r\n  },\r\n  item: {\r\n    backgroundColor: '#232f3e',\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: 'rgba(255, 255, 255, 0.7)',\r\n    '&:hover, &:focus': {\r\n      backgroundColor: '#232f3e',\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: '#232f3e',\r\n    boxShadow: '0 -1px 0 #404854 inset',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.white,\r\n  },\r\n  itemActiveItem: {\r\n\r\n    color: '#4fc3f7',\r\n  },\r\n  itemPrimary: {\r\n    fontSize: 'inherit',\r\n  },\r\n  itemIcon: {\r\n    minWidth: 'auto',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nfunction Navigator(props) {\r\n  const { classes, ...other } = props;\r\n  const [activeLink, setActiveLink] = React.useState(\"WBBSE\");\r\n  const setLeftNavigation = (parentId, childId) => {\r\n  for(var header in categories) {\r\n       if(categories[header].categoryId === parentId){\r\n         for(var child in categories[header].subCategoryList) {\r\n           if (categories[header].subCategoryList[child].subCategoryId === childId){\r\n             categories[header].subCategoryList[child].active = true;\r\n             setActiveLink(childId);\r\n             props.setNavigation(childId,parentId,categories[header].subCategoryList[child].subCategoryDescription);\r\n           }else {\r\n             categories[header].subCategoryList[child].active = false;\r\n           }\r\n       }\r\n    }\r\n  }\r\n}\r\n  return (\r\n    <>\r\n    <Drawer variant=\"permanent\" {...other}>\r\n      <List disablePadding>\r\n        <ListItem className={clsx(classes.firebase, classes.item, classes.itemCategory)}>\r\n          Academy\r\n        </ListItem>\r\n        {categories.map(({ categoryId, categoryDescription,subCategoryList }) => (\r\n          <React.Fragment key={categoryId}>\r\n            <ListItem className={classes.categoryHeader}>\r\n              <ListItemText\r\n                classes={{\r\n                  primary: classes.categoryHeaderPrimary,\r\n                }}\r\n              >\r\n                {categoryDescription}\r\n              </ListItemText>\r\n            </ListItem>\r\n            {subCategoryList.map(({ subCategoryId,subCategory,active }) => (\r\n              <ListItem\r\n                key={subCategoryId}\r\n                button\r\n                className={clsx(classes.item, active && classes.itemActiveItem)}\r\n              >\r\n                <ListItemText\r\n                  classes={{\r\n                    primary: classes.itemPrimary,\r\n                  }}\r\n                >\r\n                <Link color=\"inherit\"\r\n                    onClick={() => {\r\n                      setLeftNavigation(categoryId,subCategoryId);\r\n                }}>\r\n                {subCategory}</Link>\r\n                </ListItemText>\r\n              </ListItem>\r\n            ))}\r\n            <Divider className={classes.divider} />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nNavigator.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Navigator);\r\n","C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js",["71","72","73","74","75","76","77","78","79"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst lightColor = 'rgba(255, 255, 255, 0.7)';\r\n\r\nconst styles = (theme) => ({\r\n  secondaryBar: {\r\n    zIndex: 0,\r\n  },\r\n  iconButtonAvatar: {\r\n    padding: 4,\r\n  },\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: lightColor,\r\n    '&:hover': {\r\n      color: theme.palette.common.white,\r\n    },\r\n  },\r\n  button: {\r\n    borderColor: lightColor,\r\n  },\r\n});\r\n\r\nfunction Header(props) {\r\n  const { classes, onDrawerToggle } = props;\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [classList, setClassList] = React.useState([]);\r\n  const [selectedClass, setSelectedClass] = React.useState(\"\");\r\n  const loading = loaded && classList.length === 0;\r\n\r\n  function sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n  React.useEffect(() => {\r\n  (async () => {\r\n    if(classList != null && classList.length === 0){\r\n    const response = await fetch('https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getClassList?board=1');\r\n    await sleep(1e3);\r\n    const classListData = await response.json();\r\n    if (classListData.length > 0){\r\n      setClassList(classListData);\r\n    }\r\n  }})();\r\n}, [loading]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar color=\"primary\" position=\"sticky\" elevation={0}>\r\n        <Toolbar>\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Hidden smUp>\r\n              <Grid item>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={onDrawerToggle}\r\n                  edge=\"start\"\r\n                >\r\n                  <MenuIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </Hidden>\r\n            <Grid item xs />\r\n            <Grid item>\r\n              <Tooltip title=\"Alerts â¢ No alerts\">\r\n                <IconButton color=\"inherit\">\r\n                  <NotificationsIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Grid>\r\n            <Grid item>\r\n              {props.loggedInUser}\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        color=\"primary\"\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Toolbar>\r\n          <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item xs alignItems=\"center\">\r\n              <Typography color=\"inherit\" variant=\"h5\" component=\"h1\">\r\n                {props.selectedLeftNavigation}\r\n              </Typography>\r\n              <Typography color=\"inherit\" variant=\"h6\" component=\"h1\">\r\n\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <Tooltip title=\"Help\">\r\n                <IconButton color=\"inherit\">\r\n                  <HelpIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Tabs value={0} textColor=\"inherit\">\r\n          <Tab label=\"Knowledge Test\" />\r\n          <Tab label=\"Study Material\" />\r\n        </Tabs>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onDrawerToggle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Header);\r\n","C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js",["80","81","82","83","84","85","86"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n\r\nexport default function QuestionHeader(props) {\r\n  const classes = useStyles();\r\n  const [selectedSubject, setSelectedSubject] = React.useState('');\r\n  const [selectedClass, setSelectedClass] = React.useState('');\r\n  const [subjectDetails,setSubjectDetails] = React.useState([]);\r\n  const [subjectData,setSubjectData] = React.useState([]);\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [chapterLoaded, setChapterLoaded] = React.useState(false);\r\n  const [questionSetLoaded, setQuestionSetLoaded] = React.useState(false);\r\n  const [classListLoaded, setClassListLoaded] = React.useState(false);\r\n  const [questionSet, setQuestionSet] = React.useState([]);\r\n  const [subjectList, setSubjectList] = React.useState([]);\r\n  const [chapterList, setChapterList] = React.useState([]);\r\n  const [classList, setClassList] = React.useState([]);\r\n  const [inputSubjectValue, setInputSubjectValue] = React.useState([]);\r\n  const [inputChapterValue, setInputChapterValue] = React.useState([]);\r\n  const [inputQuestionSetValue, setInputQuestionSetValue] = React.useState([]);\r\n  const [inputClassValue, setInputClassValue] = React.useState([]);\r\n  const [selectedChapter, setSelectedChapter] = React.useState([]);\r\n  const [selectedQuestionSet, setSelectedQuestionSet] = React.useState([]);\r\n  const loading = loaded && subjectList.length === 0;\r\n  const chapterLoading = chapterLoaded && chapterList.length === 0;\r\n  const questionSetLoading = questionSetLoaded && questionSet != null && questionSet.length === 0;\r\n  const classListLoading = classListLoaded && classList != null && classList.length === 0;\r\n  const [startedExam, setStartedExam] = React.useState(false);\r\n  const [openConfirmation, setOpenConfirmation] = React.useState(false);\r\n  const [previousBoard, setPreviousBoard] = React.useState(\"\");\r\n  const [changeNavigation, setChangeNavigation] = React.useState(false);\r\n  const [readyToCancel, setReadyToCancel] = React.useState(true);\r\n  const [chpterInactive,setChapterInactive] = React.useState(false);\r\n\r\n  const displayConfirmation = () => {\r\n      setOpenConfirmation(true);\r\n  };\r\n\r\n    const closeConfirmation = () => {\r\n      setOpenConfirmation(false);\r\n    };\r\n\r\n    const closeCancelExamnation = () => {\r\n      setChangeNavigation(false);\r\n      setReadyToCancel(false);\r\n    };\r\n\r\n    const cancelExamination = () =>{\r\n       setInputClassValue(null);\r\n       setClassListLoaded(false);\r\n       //setClassList({blankLis : []});\r\n       setChangeNavigation(false);\r\n       setReadyToCancel(true);\r\n       setPreviousBoard(props.selectedBoard);\r\n       setInputSubjectValue(null);\r\n       setInputChapterValue(null);\r\n       setInputQuestionSetValue(null);\r\n       setStartedExam(false);\r\n       props.onQuestionSetSelected(false,null);\r\n      };\r\n\r\n  const confirmExamStart = () =>{\r\n     setStartedExam(true);\r\n     setOpenConfirmation(false);\r\n     displayQuestionSet();\r\n  }\r\n\r\n  const populateChapter = (value) => {\r\n\r\n   for(var k in subjectList) {\r\n      if (subjectList[k].id === value.id){\r\n          setChapterList(subjectList[k].chapterList);\r\n          setSelectedSubject(value.id);\r\n      }\r\n   }\r\n  };\r\n\r\n  function displayQuestionSet() {\r\n    if (selectedQuestionSet !== null && selectedQuestionSet !== ''){\r\n      props.onQuestionSetSelected(true,selectedQuestionSet);\r\n    }else{\r\n      props.onQuestionSetSelected(false,selectedQuestionSet);\r\n\r\n    }\r\n  }\r\n\r\n  const populateQuestionSet = ( value) => {\r\n    for(var k in chapterList) {\r\n       if (chapterList[k].id === value.id){\r\n           setQuestionSet(chapterList[k].questionset);\r\n           setSelectedChapter(value.id);\r\n\r\n       }\r\n    }\r\n    //setFormData({headerPopulated: true });\r\n  }\r\n\r\n  const selectQuestionSet = (value) => {\r\n   setSelectedQuestionSet(value.id);\r\n  }\r\n\r\n  const loadClassList = () => {\r\n    (async () => {\r\n      if(!classListLoaded){\r\n      const response = await fetch('https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getClassList?board=' + props.selectedBoard);\r\n      await sleep(1e3);\r\n      const classListData = await response.json();\r\n      if (classListData.length > 0){\r\n        //console.log(classListData);\r\n        setClassList(classListData);\r\n        setClassListLoaded(true);\r\n      }\r\n    }}\r\n  )();\r\n  setClassListLoaded(true);\r\n\r\n  }\r\nconst selectClass = (classValue) => {\r\n  setSelectedClass(classValue.classId);\r\n  setInputSubjectValue(null);\r\n  setInputChapterValue(null);\r\n  setInputQuestionSetValue(null);\r\n  //populateSubject();\r\n}\r\nconst populateSubject = () => {\r\n    setLoaded(true);\r\n    (async () => {\r\n      if(subjectData.length === 0){\r\n      const response = await fetch('https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getAllClassDetails?board=' + props.selectedBoard + '&class=' + selectedClass);\r\n      await sleep(1e3);\r\n      const subjectData = await response.json();\r\n      console.log(subjectData);\r\n        setSubjectDetails(subjectData);\r\n        setSubjectList(subjectData[0].subjectList);\r\n    }})();\r\n}\r\n\r\n  React.useEffect(() => {\r\n    if(previousBoard === \"\"){\r\n      setPreviousBoard(props.selectedBoard);\r\n    }else if (previousBoard != \"\" && previousBoard !== props.selectedBoard) {\r\n      cancelExamination();\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <div>\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n    <Autocomplete\r\n    id=\"subject-list\"\r\n    style={{width: 150}}\r\n    open={classListLoaded}\r\n    onOpen={() => {loadClassList()}}\r\n    disableClearable\r\n    value = {inputClassValue}\r\n    onChange={(event, newValue) => {\r\n        selectClass(newValue);\r\n        setInputClassValue(newValue);\r\n      }}\r\n    onClose={() => {\r\n      setClassListLoaded(false);\r\n    }}\r\n    disabled = {(startedExam && !props.retestStarted) ? true : false}\r\n    getOptionSelected={(classValue, value) => {return classValue.classId === value.classId}}\r\n    getOptionLabel={(classValue) => classValue.className}\r\n    options={classList}\r\n    loading={classListLoading}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        label=\"Class\"\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          endAdornment: (\r\n            <React.Fragment>\r\n              {classListLoading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n              {params.InputProps.endAdornment}\r\n            </React.Fragment>\r\n          ),\r\n        }}\r\n      />\r\n    )}\r\n  />\r\n  </FormControl>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      <Autocomplete\r\n      id=\"subject-list\"\r\n      style={{ width: 150}}\r\n      open={loaded}\r\n      onOpen={() => {\r\n        populateSubject();\r\n      }}\r\n      value={inputSubjectValue}\r\n      disableClearable\r\n      disabled = {(startedExam && !props.retestStarted) ? true : false  }\r\n      onClose={() => {\r\n        setLoaded(false);\r\n      }}\r\n      onChange={(event, newValue) => {\r\n          populateChapter(newValue);\r\n          setInputChapterValue(null);\r\n          setInputSubjectValue(newValue);\r\n        }}\r\n      getOptionSelected={(subject, value) => {setInputSubjectValue(value); return subject.id === value.id}}\r\n      getOptionLabel={(subject) => subject.name}\r\n      options={subjectList}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Subject\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    </FormControl>\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n    <Autocomplete\r\n    id=\"chapter-list\"\r\n    style={{ width: 200 }}\r\n    open={chapterLoaded}\r\n    onOpen={() => {\r\n       populateChapter(selectedSubject);\r\n       setChapterLoaded(true);\r\n    }}\r\n    onClose={() => {\r\n      setChapterLoaded(false);\r\n    }}\r\n    disableClearable\r\n    disabled = {(startedExam && !props.retestStarted) ? true : false  }\r\n    hidden={(props.boardHeaderName === \"Olympiad\") ? true : false }\r\n    value = {inputChapterValue}\r\n    onChange={(event, newValue) => {\r\n        populateQuestionSet(newValue);\r\n        setInputQuestionSetValue(null);\r\n        setInputChapterValue(newValue);\r\n      }}\r\n    getOptionSelected={(chapter, value) => { return ((chapter.id === value.id) && selectedSubject != null)}}\r\n    getOptionLabel={(chapter) => chapter.name}\r\n    options={chapterList}\r\n    loading={chapterLoading}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        label=\"Chapter\"\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          endAdornment: (\r\n            <React.Fragment>\r\n              {chapterLoading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n              {params.InputProps.endAdornment}\r\n            </React.Fragment>\r\n          ),\r\n        }}\r\n      />\r\n    )}\r\n  />\r\n  </FormControl>\r\n  <FormControl variant=\"outlined\" className={classes.formControl}>\r\n  <Autocomplete\r\n  id=\"questionSet-list\"\r\n  style={{ width: 260 }}\r\n  open={questionSetLoaded}\r\n  onOpen={() => {\r\n    populateQuestionSet(selectedChapter);\r\n     setQuestionSetLoaded(true);\r\n  }}\r\n  onClose={() => {\r\n    setQuestionSetLoaded(false);\r\n  }}\r\n  disableClearable\r\n  disabled = {(startedExam && !props.retestStarted) ? true : false  }\r\n  value = {inputQuestionSetValue}\r\n  onChange={(event, newValue) => {\r\n      selectQuestionSet(newValue);\r\n      setInputQuestionSetValue(newValue);\r\n    }}\r\n  getOptionSelected={(questionSet, value) => { return questionSet.id === value.id}}\r\n  getOptionLabel={(questionSet) => questionSet.name}\r\n  options={questionSet}\r\n  loading={questionSetLoading}\r\n  renderInput={(params) => (\r\n    <TextField\r\n      {...params}\r\n      label=\"Question Set\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        ...params.InputProps,\r\n        endAdornment: (\r\n          <React.Fragment>\r\n            {questionSetLoading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n            {params.InputProps.endAdornment}\r\n          </React.Fragment>\r\n        ),\r\n      }}\r\n    />\r\n  )}\r\n/>\r\n</FormControl>\r\n<Button variant=\"contained\" color=\"primary\" onClick = {displayConfirmation} disabled = {(startedExam && !props.retestStarted) ? true : false  }>Start</Button>\r\n<Dialog\r\n    open={openConfirmation}\r\n    onClose={closeConfirmation}\r\n    aria-labelledby=\"alert-dialog-title\"\r\n    aria-describedby=\"alert-dialog-description\"\r\n  >\r\n    <DialogTitle id=\"alert-dialog-title\">{\"Confirmation - Submission\"}</DialogTitle>\r\n    <DialogContent>\r\n      <DialogContentText id=\"alert-dialog-description\">Are you sure to start the examination?</DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions>\r\n      <Button onClick={confirmExamStart} color=\"primary\">Confirm</Button>\r\n      <Button onClick={closeConfirmation} color=\"primary\" autoFocus>Cancel</Button>\r\n    </DialogActions>\r\n  </Dialog>\r\n  <Dialog\r\n      open={changeNavigation}\r\n      onClose={closeCancelExamnation}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-nav-title\">{\"Confirmation\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-nav-description\">The examination is already in progress. Do you really want to cancel the examination ? </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={cancelExamination} color=\"primary\">Confirm</Button>\r\n        <Button onClick={closeCancelExamnation} color=\"primary\" autoFocus>Cancel</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\Question.js",["87"],"C:\\academy\\academyexcellenceweb\\src\\DisplayStatus.js",[],"C:\\academy\\academyexcellenceweb\\src\\DisplayTimer.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":188,"column":27,"nodeType":"94","messageId":"95","endLine":188,"endColumn":45},{"ruleId":"92","severity":1,"message":"96","line":189,"column":24,"nodeType":"94","messageId":"95","endLine":189,"endColumn":40},{"ruleId":"92","severity":1,"message":"97","line":9,"column":8,"nodeType":"94","messageId":"95","endLine":9,"endColumn":20},{"ruleId":"92","severity":1,"message":"98","line":11,"column":8,"nodeType":"94","messageId":"95","endLine":11,"endColumn":16},{"ruleId":"92","severity":1,"message":"99","line":12,"column":8,"nodeType":"94","messageId":"95","endLine":12,"endColumn":18},{"ruleId":"92","severity":1,"message":"100","line":13,"column":8,"nodeType":"94","messageId":"95","endLine":13,"endColumn":22},{"ruleId":"92","severity":1,"message":"101","line":14,"column":8,"nodeType":"94","messageId":"95","endLine":14,"endColumn":29},{"ruleId":"92","severity":1,"message":"102","line":15,"column":8,"nodeType":"94","messageId":"95","endLine":15,"endColumn":17},{"ruleId":"92","severity":1,"message":"103","line":16,"column":8,"nodeType":"94","messageId":"95","endLine":16,"endColumn":20},{"ruleId":"92","severity":1,"message":"104","line":113,"column":10,"nodeType":"94","messageId":"95","endLine":113,"endColumn":20},{"ruleId":"92","severity":1,"message":"105","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":14},{"ruleId":"92","severity":1,"message":"106","line":16,"column":8,"nodeType":"94","messageId":"95","endLine":16,"endColumn":19},{"ruleId":"92","severity":1,"message":"107","line":17,"column":8,"nodeType":"94","messageId":"95","endLine":17,"endColumn":17},{"ruleId":"92","severity":1,"message":"108","line":18,"column":8,"nodeType":"94","messageId":"95","endLine":18,"endColumn":20},{"ruleId":"92","severity":1,"message":"109","line":19,"column":8,"nodeType":"94","messageId":"95","endLine":19,"endColumn":24},{"ruleId":"92","severity":1,"message":"110","line":45,"column":18,"nodeType":"94","messageId":"95","endLine":45,"endColumn":27},{"ruleId":"92","severity":1,"message":"111","line":47,"column":10,"nodeType":"94","messageId":"95","endLine":47,"endColumn":23},{"ruleId":"92","severity":1,"message":"96","line":47,"column":25,"nodeType":"94","messageId":"95","endLine":47,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":65,"column":4,"nodeType":"114","endLine":65,"endColumn":13,"suggestions":"115"},{"ruleId":"92","severity":1,"message":"116","line":34,"column":10,"nodeType":"94","messageId":"95","endLine":34,"endColumn":24},{"ruleId":"92","severity":1,"message":"117","line":35,"column":22,"nodeType":"94","messageId":"95","endLine":35,"endColumn":36},{"ruleId":"92","severity":1,"message":"118","line":58,"column":10,"nodeType":"94","messageId":"95","endLine":58,"endColumn":23},{"ruleId":"92","severity":1,"message":"119","line":59,"column":10,"nodeType":"94","messageId":"95","endLine":59,"endColumn":24},{"ruleId":"92","severity":1,"message":"120","line":59,"column":25,"nodeType":"94","messageId":"95","endLine":59,"endColumn":43},{"ruleId":"112","severity":1,"message":"121","line":164,"column":3,"nodeType":"122","endLine":164,"endColumn":18,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":167,"column":29,"nodeType":"126","messageId":"127","endLine":167,"endColumn":31},{"ruleId":"112","severity":1,"message":"128","line":94,"column":3,"nodeType":"114","endLine":94,"endColumn":5,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'setHeaderPopulated' is assigned a value but never used.","Identifier","unusedVar","'setSelectedClass' is assigned a value but never used.","'ListItemIcon' is defined but never used.","'HomeIcon' is defined but never used.","'PeopleIcon' is defined but never used.","'DnsRoundedIcon' is defined but never used.","'PermMediaOutlinedIcon' is defined but never used.","'TimerIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'activeLink' is assigned a value but never used.","'Avatar' is defined but never used.","'FormControl' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'CircularProgress' is defined but never used.","'setLoaded' is assigned a value but never used.","'selectedClass' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'classList'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'subjectDetails' is assigned a value but never used.","'setSubjectData' is assigned a value but never used.","'readyToCancel' is assigned a value but never used.","'chpterInactive' is assigned a value but never used.","'setChapterInactive' is assigned a value but never used.","React Hook useEffect contains a call to 'setPreviousBoard'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [previousBoard, props.selectedBoard, cancelExamination] as a second argument to the useEffect Hook.","MemberExpression",["133"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook React.useEffect has a missing dependency: 'props.questionSet'. Either include it or remove the dependency array.",["134"],"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [classList, loading]",{"range":"141","text":"142"},"Add dependencies array: [previousBoard, props.selectedBoard, cancelExamination]",{"range":"143","text":"144"},"Update the dependencies array to be: [props.questionSet]",{"range":"145","text":"146"},[2184,2193],"[classList, loading]",[6179,6179],", [previousBoard, props.selectedBoard, cancelExamination]",[3447,3449],"[props.questionSet]"]