[{"C:\\academy\\academyexcellenceweb\\src\\index.js":"1","C:\\academy\\academyexcellenceweb\\src\\App.js":"2","C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js":"3","C:\\academy\\academyexcellenceweb\\src\\aws-exports.js":"4","C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js":"5","C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js":"6","C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js":"7","C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js":"8","C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js":"9","C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js":"10","C:\\academy\\academyexcellenceweb\\src\\Question.js":"11"},{"size":626,"mtime":1609653902282,"results":"12","hashOfConfig":"13"},{"size":540,"mtime":1609653902262,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1609653902299,"results":"15","hashOfConfig":"13"},{"size":487,"mtime":1609653902272,"results":"16","hashOfConfig":"13"},{"size":305,"mtime":1609653902282,"results":"17","hashOfConfig":"13"},{"size":4661,"mtime":1609653902292,"results":"18","hashOfConfig":"13"},{"size":4487,"mtime":1609653902290,"results":"19","hashOfConfig":"13"},{"size":1647,"mtime":1609653902287,"results":"20","hashOfConfig":"13"},{"size":3549,"mtime":1609653902288,"results":"21","hashOfConfig":"13"},{"size":5953,"mtime":1609653902272,"results":"22","hashOfConfig":"13"},{"size":7692,"mtime":1610092861449,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1x9z1w5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"C:\\academy\\academyexcellenceweb\\src\\index.js",[],["49","50"],"C:\\academy\\academyexcellenceweb\\src\\App.js",[],"C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js",[],"C:\\academy\\academyexcellenceweb\\src\\aws-exports.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js",[],"C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js",["51","52","53","54","55","56","57","58","59","60","61"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function QuestionHeader() {\r\n  const classes = useStyles();\r\n  const [selectedSubject, setSelectedSubject] = React.useState('');\r\n  const [category, setCategory] = React.useState('');\r\n  const [subjectDetails,setSubjectDetails] = React.useState([]);\r\n  const [subjectData,setSubjectData] = React.useState([]);\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [chapterLoaded, setChapterLoaded] = React.useState(false);\r\n  const [questionSetLoaded, setQuestionSetLoaded] = React.useState(false);\r\n  const [questionSet, setQuestionSet] = React.useState([]);\r\n  const [subjectList, setSubjectList] = React.useState([]);\r\n  const [chapterList, setChapterList] = React.useState([]);\r\n  const [selectedChapter, setSelectedChapter] = React.useState([]);\r\n  const loading = loaded && subjectList.length === 0;\r\n  const chapterLoading = chapterLoaded && chapterList.length === 0;\r\n  const questionSetLoading = questionSetLoaded && questionSet != null && questionSet.length === 0;\r\n\r\n  const populateChapter = (subject,value) => {\r\n   //alert(value.name);\r\n   setSelectedSubject(value.id);\r\n   for(var k in subjectList) {\r\n      if (subjectList[k].id == selectedSubject){\r\n          setChapterList(subjectList[k].chapterList);\r\n      }\r\n   }\r\n   //setChapterList(subjectList[1].chapterList);\r\n  };\r\n\r\n  const populateQuestionSet = (chapter, value) => {\r\n    setSelectedChapter(value.id);\r\n    for(var k in chapterList) {\r\n       if (chapterList[k].id == selectedChapter){\r\n           setQuestionSet(chapterList[k].questionset);\r\n       }\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n  (async () => {\r\n    if(subjectData != null && subjectData.length == 0){\r\n    const response = await fetch('https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getAllClassDetails?board=1');\r\n    await sleep(1e3);\r\n    const subjectData = await response.json();\r\n    if (subjectData.length > 0){\r\n      setSubjectDetails(subjectData);\r\n      setSubjectList(subjectData[0].subjectList);\r\n    }\r\n  }})();\r\n}, [loading]);\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      <Autocomplete\r\n      id=\"subject-list\"\r\n      style={{ width: 200 }}\r\n      open={loaded}\r\n      onOpen={() => {\r\n        setLoaded(true);\r\n      }}\r\n      onClose={() => {\r\n        setLoaded(false);\r\n      }}\r\n      getOptionSelected={(subject, value) => {populateChapter(subject,value); return subject.id === value.id}}\r\n      getOptionLabel={(subject) => subject.name}\r\n      options={subjectList}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Subject\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    </FormControl>\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n    <Autocomplete\r\n    id=\"chapter-list\"\r\n    style={{ width: 200 }}\r\n    open={chapterLoaded}\r\n    onOpen={() => {\r\n       setChapterLoaded(true);\r\n    }}\r\n    onClose={() => {\r\n      setChapterLoaded(false);\r\n    }}\r\n    getOptionSelected={(chapter, value) => { populateQuestionSet(chapter,value); return chapter.id === value.id}}\r\n    getOptionLabel={(chapter) => chapter.name}\r\n    options={chapterList}\r\n    loading={chapterLoading}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        label=\"Chapter\"\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          endAdornment: (\r\n            <React.Fragment>\r\n              {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n              {params.InputProps.endAdornment}\r\n            </React.Fragment>\r\n          ),\r\n        }}\r\n      />\r\n    )}\r\n  />\r\n  </FormControl>\r\n  <FormControl variant=\"outlined\" className={classes.formControl}>\r\n  <Autocomplete\r\n  id=\"questionSet-list\"\r\n  style={{ width: 250 }}\r\n  open={questionSetLoaded}\r\n  onOpen={() => {\r\n     setQuestionSetLoaded(true);\r\n  }}\r\n  onClose={() => {\r\n    setQuestionSetLoaded(false);\r\n  }}\r\n  getOptionSelected={(questionSet, value) => {return questionSet.id === value.id}}\r\n  getOptionLabel={(questionSet) => questionSet.name}\r\n  options={questionSet}\r\n  loading={questionSetLoading}\r\n  renderInput={(params) => (\r\n    <TextField\r\n      {...params}\r\n      label=\"Question Set\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        ...params.InputProps,\r\n        endAdornment: (\r\n          <React.Fragment>\r\n            {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n            {params.InputProps.endAdornment}\r\n          </React.Fragment>\r\n        ),\r\n      }}\r\n    />\r\n  )}\r\n/>\r\n</FormControl>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <Button variant=\"contained\" color=\"primary\">Start</Button>\r\n\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\Question.js",["62","63"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\nconst questionList = [\r\n  {\r\n    id: 'Q1',\r\n    class:'Class 1',\r\n    subject:'Mathmatics',\r\n    board:'WBBSE',\r\n    question:'Please  find the correct answer 10 + 2 = ? ',\r\n    options: [\r\n      {\r\n        id: '1',\r\n        option: '12',\r\n        correct: 'Y',\r\n      },\r\n      {\r\n        id: '2',\r\n        option: '20',\r\n        correct: 'N',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: 'Q2',\r\n    class:'Class 1',\r\n    subject:'Mathmatics',\r\n    board:'WBBSE',\r\n    question:'Please  find the correct answer 10 + 5 = ? ',\r\n    options: [\r\n      {\r\n        id: '1',\r\n        option: '10',\r\n        correct: 'N',\r\n      },\r\n      {\r\n        id: '2',\r\n        option: '15',\r\n        correct: 'Y',\r\n      }\r\n    ],\r\n  },\r\n  {\r\n    id: 'Q3',\r\n    class:'Class 1',\r\n    subject:'Mathmatics',\r\n    board:'WBBSE',\r\n    question:'Please  find the correct answer 25 + 5 = ? ',\r\n    options: [\r\n      {\r\n        id: '1',\r\n        option: '30',\r\n        correct: 'Y',\r\n      },\r\n      {\r\n        id: '2',\r\n        option: '15',\r\n        correct: 'N',\r\n      }\r\n    ],\r\n  }\r\n];\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function Question() {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('');\r\n  const [error, setError] = React.useState(false);\r\n  const [helperText, setHelperText] = React.useState('Choose wisely');\r\n  const [helperTextone, setHelperTextone] = React.useState(' ');\r\n  const [helperTextcorrect, setHelperTextcorrect] = React.useState(' ');\r\n  const [helperTextwrong, setHelperTextwrong] = React.useState(' ');\r\n  //const [state, setState] = React.useState(true);\r\n  const [showText, setShowText] = React.useState(true);\r\n  const [questionIndex, setQuestionIndex] = React.useState(0);\r\n  const [correctAns, setCorrectAns] = React.useState(0);\r\n  const [wrongAns, setWrongAns] = React.useState(0);\r\n  const [selected, setSelected] = React.useState();\r\n  const [questionAnswer,setQuestionAnswer] = React.useState(['']);\r\n\r\n  const prevNextQuestion = (event, newValue) => {\r\n      if (newValue === 'next') {\r\n        if (questionIndex + 1 < questionList.length){\r\n          setQuestionIndex(questionIndex + 1);\r\n          setHelperText(' '); /** reset the value of setHelperText for next icon arrow*/\r\n          setError(false);\r\n        }\r\n\r\n      }\r\n\r\n\r\n\r\n      if (newValue === 'previous') {\r\n        if (questionIndex > 0){\r\n          setQuestionIndex(questionIndex - 1);\r\n        }\r\n        if (value === 'Y'){\r\n          if (correctAns > 0){\r\n            setCorrectAns(correctAns - 1);\r\n          }\r\n        }\r\n        if (value === 'N'){\r\n          if (wrongAns > 0){\r\n            setWrongAns(wrongAns - 1);\r\n          }\r\n        }\r\n\r\n      }\r\n      if (questionAnswer.length === questionIndex) {\r\n        questionAnswer[questionIndex] = '';\r\n      }\r\n\r\n    };\r\n\r\n  const selectAnswer = (event) => {\r\n    setValue(event.target.value);\r\n    setHelperText(' ');\r\n    setError(false);\r\n    questionAnswer[questionIndex] = event.target.value;\r\n    setQuestionAnswer(questionAnswer)\r\n    var answered = 0;\r\n    for (var i = 0; i<questionAnswer.length ; i++){\r\n      if (questionAnswer[i] !== ''){\r\n        answered = answered + 1;\r\n      }\r\n    }\r\n    setProgress((answered/questionList.length)*100);\r\n\r\n  };\r\n\r\n  const checkAnswer = (event) => {\r\n    event.preventDefault();\r\n    if (value === 'Y') {\r\n      if (correctAns + 1 <= questionList.length){\r\n            setCorrectAns(correctAns + 1);\r\n          }\r\n      setHelperText('Correct!');\r\n      setError(false);\r\n    } else if (value === 'N') {\r\n      if (wrongAns + 1 <= questionList.length){\r\n           setWrongAns(wrongAns + 1);\r\n         }\r\n      setHelperText('Sorry, wrong answer!');\r\n      setError(true);\r\n    } else {\r\n      setHelperText('Please select an option.');\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const checkAnsweras = (event) => {\r\n    event.preventDefault();\r\n    setHelperTextone('Total Questions Attemt:');\r\n    setHelperTextcorrect('Correct Answer:');\r\n    setHelperTextwrong('Wrong Answer:');\r\n    setShowText(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    {showText && <LinearProgressWithLabel value={progress} />}\r\n\r\n    {showText && <form onSubmit={checkAnswer}>\r\n      <FormControl component=\"fieldset\" error={error} className={classes.formControl}>\r\n        <FormLabel component=\"legend\">{questionList[questionIndex].question}</FormLabel>\r\n        <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={questionAnswer[questionIndex]} onChange={selectAnswer}>\r\n          <FormControlLabel value={questionList[questionIndex].options[0].correct} control={<Radio />} label={questionList[questionIndex].options[0].option} />\r\n          <FormControlLabel value={questionList[questionIndex].options[1].correct} control={<Radio />} label={questionList[questionIndex].options[1].option} />\r\n        </RadioGroup>\r\n        <FormHelperText>{helperText}</FormHelperText>\r\n        <Button type=\"submit\" variant=\"outlined\" color=\"primary\" className={classes.button}>\r\n          Check Answer\r\n        </Button>\r\n      </FormControl>\r\n    </form>}\r\n    <form onSubmit={checkAnsweras}>\r\n    <FormControl component=\"fieldset\" className={classes.formControl}>\r\n    <FormHelperText>{helperTextone}{progress}</FormHelperText>\r\n    <FormHelperText>{helperTextcorrect}{correctAns}</FormHelperText>\r\n    <FormHelperText>{helperTextwrong}{wrongAns}</FormHelperText>\r\n    <Button type=\"submit\" variant=\"outlined\" color=\"primary\" className={classes.button}>\r\n      Complete Test\r\n    </Button>\r\n    </FormControl>\r\n    </form>\r\n      {showText && <BottomNavigation value={value} onChange={prevNextQuestion} className={classes.root}>\r\n        <BottomNavigationAction label=\"Previous\" value=\"previous\" icon={<ArrowBackIosIcon />}/>\r\n        <BottomNavigationAction label=\"Next\" value=\"next\" icon={<ArrowForwardIosIcon />} />\r\n      </BottomNavigation>}\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":3,"column":8,"nodeType":"70","messageId":"71","endLine":3,"endColumn":18},{"ruleId":"68","severity":1,"message":"72","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":16},{"ruleId":"68","severity":1,"message":"73","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":14},{"ruleId":"68","severity":1,"message":"74","line":31,"column":10,"nodeType":"70","messageId":"71","endLine":31,"endColumn":18},{"ruleId":"68","severity":1,"message":"75","line":31,"column":20,"nodeType":"70","messageId":"71","endLine":31,"endColumn":31},{"ruleId":"68","severity":1,"message":"76","line":32,"column":10,"nodeType":"70","messageId":"71","endLine":32,"endColumn":24},{"ruleId":"68","severity":1,"message":"77","line":33,"column":22,"nodeType":"70","messageId":"71","endLine":33,"endColumn":36},{"ruleId":"78","severity":1,"message":"79","line":49,"column":29,"nodeType":"80","messageId":"81","endLine":49,"endColumn":31},{"ruleId":"78","severity":1,"message":"79","line":59,"column":30,"nodeType":"80","messageId":"81","endLine":59,"endColumn":32},{"ruleId":"78","severity":1,"message":"79","line":67,"column":50,"nodeType":"80","messageId":"81","endLine":67,"endColumn":52},{"ruleId":"82","severity":1,"message":"83","line":76,"column":4,"nodeType":"84","endLine":76,"endColumn":13,"suggestions":"85"},{"ruleId":"68","severity":1,"message":"86","line":128,"column":10,"nodeType":"70","messageId":"71","endLine":128,"endColumn":18},{"ruleId":"68","severity":1,"message":"87","line":128,"column":20,"nodeType":"70","messageId":"71","endLine":128,"endColumn":31},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","'Select' is defined but never used.","'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'subjectDetails' is assigned a value but never used.","'setSubjectData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'subjectData'. Either include it or remove the dependency array.","ArrayExpression",["90"],"'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [loading, subjectData]",{"range":"93","text":"94"},[2838,2847],"[loading, subjectData]"]