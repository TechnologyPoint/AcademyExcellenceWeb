[{"C:\\academy\\academyexcellenceweb\\src\\index.js":"1","C:\\academy\\academyexcellenceweb\\src\\aws-exports.js":"2","C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js":"3","C:\\academy\\academyexcellenceweb\\src\\App.js":"4","C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js":"5","C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js":"6","C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js":"7","C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js":"8","C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js":"9","C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js":"10","C:\\academy\\academyexcellenceweb\\src\\Question.js":"11","C:\\academy\\academyexcellenceweb\\src\\DisplayTimer.js":"12","C:\\academy\\academyexcellenceweb\\src\\DisplayStatus.js":"13"},{"size":626,"mtime":1611226033304,"results":"14","hashOfConfig":"15"},{"size":487,"mtime":1611226033302,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1611226033318,"results":"17","hashOfConfig":"15"},{"size":540,"mtime":1611226033293,"results":"18","hashOfConfig":"15"},{"size":305,"mtime":1611226033308,"results":"19","hashOfConfig":"15"},{"size":5191,"mtime":1611226033314,"results":"20","hashOfConfig":"15"},{"size":4331,"mtime":1611226761384,"results":"21","hashOfConfig":"15"},{"size":6417,"mtime":1611227029043,"results":"22","hashOfConfig":"15"},{"size":2807,"mtime":1611226033309,"results":"23","hashOfConfig":"15"},{"size":7989,"mtime":1611226033300,"results":"24","hashOfConfig":"15"},{"size":6133,"mtime":1611226033298,"results":"25","hashOfConfig":"15"},{"size":965,"mtime":1611226033297,"results":"26","hashOfConfig":"15"},{"size":5287,"mtime":1611226033295,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1arflji",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\academy\\academyexcellenceweb\\src\\index.js",[],["58","59"],"C:\\academy\\academyexcellenceweb\\src\\aws-exports.js",[],"C:\\academy\\academyexcellenceweb\\src\\reportWebVitals.js",[],"C:\\academy\\academyexcellenceweb\\src\\App.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\AppTheme.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Paperbase.js",[],"C:\\academy\\academyexcellenceweb\\src\\layout\\Navigator.js",["60","61","62"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport DnsRoundedIcon from '@material-ui/icons/DnsRounded';\r\nimport PermMediaOutlinedIcon from '@material-ui/icons/PhotoSizeSelectActual';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Header from './Header';\r\nimport App from '../App.css';\r\n\r\nconst categories = [\r\n  {\r\n    id: 'Academy Board',\r\n    children: [\r\n      {\r\n        id: 'WBBSE',\r\n        icon: <PeopleIcon />,\r\n      },\r\n      { id: 'CBSE', icon: <DnsRoundedIcon /> },\r\n      { id: 'ICSE', icon: <PermMediaOutlinedIcon /> },\r\n    ],\r\n  }\r\n];\r\n\r\nconst styles = (theme) => ({\r\n  categoryHeader: {\r\n    backgroundColor: '#232f3e',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: theme.palette.common.white,\r\n  },\r\n  item: {\r\n    backgroundColor: '#232f3e',\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: 'rgba(255, 255, 255, 0.7)',\r\n    '&:hover, &:focus': {\r\n      backgroundColor: '#232f3e',\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: '#232f3e',\r\n    boxShadow: '0 -1px 0 #404854 inset',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.white,\r\n  },\r\n  itemActiveItem: {\r\n\r\n    color: '#4fc3f7',\r\n  },\r\n  itemPrimary: {\r\n    fontSize: 'inherit',\r\n  },\r\n  itemIcon: {\r\n    minWidth: 'auto',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nfunction Navigator(props) {\r\n  const { classes, ...other } = props;\r\n  const [data,setData] = React.useState('');\r\n\r\n  return (\r\n    <>\r\n    <Drawer variant=\"permanent\" {...other}>\r\n      <List disablePadding>\r\n        <ListItem\r\n          className={clsx(classes.firebase, classes.item, classes.itemCategory)}\r\n        >\r\n          Academy\r\n        </ListItem>\r\n        <ListItem className={clsx(classes.item, classes.itemCategory)}>\r\n          <ListItemIcon className={classes.itemIcon}>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            classes={{\r\n              primary: classes.itemPrimary,\r\n            }}\r\n          >\r\n            Home\r\n          </ListItemText>\r\n        </ListItem>\r\n        {categories.map(({ id, children }) => (\r\n          <React.Fragment key={id}>\r\n            <ListItem className={classes.categoryHeader}>\r\n              <ListItemText\r\n                classes={{\r\n                  primary: classes.categoryHeaderPrimary,\r\n                }}\r\n              >\r\n                {id}\r\n              </ListItemText>\r\n            </ListItem>\r\n            {children.map(({ id: childId, icon, active }) => (\r\n              <ListItem onClick={(e)=>{\r\n                setData(childId);\r\n                var elems = document.querySelectorAll('.itemActiveItem');\r\n                [].forEach.call(elems, function(el) {\r\n                  el.classList.remove('itemActiveItem');\r\n                });\r\n                e.target.className = 'itemActiveItem';\r\n              }}\r\n                key={childId}\r\n                button\r\n                className={clsx(classes.item, active && classes.itemActiveItem)}\r\n              >\r\n\r\n                <ListItemText\r\n                  classes={{\r\n                    primary: classes.itemPrimary,\r\n                  }}\r\n                >\r\n                  {childId}\r\n                </ListItemText>\r\n              </ListItem>\r\n            ))}\r\n\r\n            <Divider className={classes.divider} />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n    <Header boardName = {data} />\r\n    </>\r\n  );\r\n}\r\n\r\nNavigator.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Navigator);\r\n","C:\\academy\\academyexcellenceweb\\src\\layout\\Header.js",["63","64","65"],"C:\\academy\\academyexcellenceweb\\src\\layout\\Content.js",[],"C:\\academy\\academyexcellenceweb\\src\\QuestionHeader.js",["66","67","68"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n\r\nexport default function QuestionHeader(props) {\r\n  const classes = useStyles();\r\n  const [selectedSubject, setSelectedSubject] = React.useState('');\r\n  const [subjectDetails,setSubjectDetails] = React.useState([]);\r\n  const [subjectData,setSubjectData] = React.useState([]);\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [chapterLoaded, setChapterLoaded] = React.useState(false);\r\n  const [questionSetLoaded, setQuestionSetLoaded] = React.useState(false);\r\n  const [questionSet, setQuestionSet] = React.useState([]);\r\n  const [subjectList, setSubjectList] = React.useState([]);\r\n  const [chapterList, setChapterList] = React.useState([]);\r\n  const [selectedChapter, setSelectedChapter] = React.useState([]);\r\n  const [selectedQuestionSet, setSelectedQuestionSet] = React.useState([]);\r\n\r\n  const loading = loaded && subjectList.length === 0;\r\n  const chapterLoading = chapterLoaded && chapterList.length === 0;\r\n  const questionSetLoading = questionSetLoaded && questionSet != null && questionSet.length === 0;\r\n  const [startedExam, setStartedExam] = React.useState(false);\r\n  const [openConfirmation, setOpenConfirmation] = React.useState(false);\r\n\r\n  const displayConfirmation = () => {\r\n      setOpenConfirmation(true);\r\n    };\r\n\r\n    const closeConfirmation = () => {\r\n      setOpenConfirmation(false);\r\n    };\r\n\r\n\r\n  const confirmExamStart = () =>{\r\n     setStartedExam(true);\r\n     setOpenConfirmation(false);\r\n     displayQuestionSet();\r\n  }\r\n\r\n  const populateChapter = (value) => {\r\n   for(var k in subjectList) {\r\n      if (subjectList[k].id === value.id){\r\n          setChapterList(subjectList[k].chapterList);\r\n          setSelectedSubject(value.id);\r\n      }\r\n   }\r\n  };\r\n\r\n  function displayQuestionSet() {\r\n    if (selectedQuestionSet !== null && selectedQuestionSet !== ''){\r\n      props.onQuestionSetSelected(true,selectedQuestionSet);\r\n    }else{\r\n      props.onQuestionSetSelected(false,selectedQuestionSet);\r\n\r\n    }\r\n  }\r\n\r\n  const populateQuestionSet = ( value) => {\r\n    for(var k in chapterList) {\r\n       if (chapterList[k].id === value.id){\r\n           setQuestionSet(chapterList[k].questionset);\r\n           setSelectedChapter(value.id);\r\n\r\n       }\r\n    }\r\n    //setFormData({headerPopulated: true });\r\n  }\r\n\r\n  const selectQuestionSet = (value) => {\r\n   setSelectedQuestionSet(value.id);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n  (async () => {\r\n    if(subjectData != null && subjectData.length === 0){\r\n    const response = await fetch('https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getAllClassDetails?board=' + props.selectedBoard + '&class=' + props.selectedClass);\r\n    await sleep(1e3);\r\n    const subjectData = await response.json();\r\n    if (subjectData.length > 0){\r\n      setSubjectDetails(subjectData);\r\n      setSubjectList(subjectData[0].subjectList);\r\n    }\r\n  }})();\r\n}, [loading]);\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      <Autocomplete\r\n      id=\"subject-list\"\r\n      style={{ width: 200}}\r\n      open={loaded}\r\n      onOpen={() => {\r\n        setLoaded(true);\r\n      }}\r\n      disableClearable\r\n      disabled = {startedExam}\r\n      onClose={() => {\r\n        setLoaded(false);\r\n      }}\r\n      onChange={(event, newValue) => {\r\n          populateChapter(newValue);\r\n        }}\r\n      getOptionSelected={(subject, value) => {return subject.id === value.id}}\r\n      getOptionLabel={(subject) => subject.name}\r\n      options={subjectList}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Subject\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    </FormControl>\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n    <Autocomplete\r\n    id=\"chapter-list\"\r\n    style={{ width: 200 }}\r\n    open={chapterLoaded}\r\n    onOpen={() => {\r\n       populateChapter(selectedSubject);\r\n       setChapterLoaded(true);\r\n    }}\r\n    onClose={() => {\r\n      setChapterLoaded(false);\r\n    }}\r\n    disableClearable\r\n    disabled = {startedExam}\r\n    onChange={(event, newValue) => {\r\n        populateQuestionSet(newValue);\r\n      }}\r\n    getOptionSelected={(chapter, value) => { return ((chapter.id === value.id) && selectedSubject != null)}}\r\n    getOptionLabel={(chapter) => chapter.name}\r\n    options={chapterList}\r\n    loading={chapterLoading}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        label=\"Chapter\"\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          endAdornment: (\r\n            <React.Fragment>\r\n              {chapterLoading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n              {params.InputProps.endAdornment}\r\n            </React.Fragment>\r\n          ),\r\n        }}\r\n      />\r\n    )}\r\n  />\r\n  </FormControl>\r\n  <FormControl variant=\"outlined\" className={classes.formControl}>\r\n  <Autocomplete\r\n  id=\"questionSet-list\"\r\n  style={{ width: 260 }}\r\n  open={questionSetLoaded}\r\n  onOpen={() => {\r\n    populateQuestionSet(selectedChapter);\r\n     setQuestionSetLoaded(true);\r\n  }}\r\n  onClose={() => {\r\n    setQuestionSetLoaded(false);\r\n  }}\r\n  disableClearable\r\n  disabled = {startedExam}\r\n  onChange={(event, newValue) => {\r\n      selectQuestionSet(newValue);\r\n    }}\r\n  getOptionSelected={(questionSet, value) => { return questionSet.id === value.id}}\r\n  getOptionLabel={(questionSet) => questionSet.name}\r\n  options={questionSet}\r\n  loading={questionSetLoading}\r\n  renderInput={(params) => (\r\n    <TextField\r\n      {...params}\r\n      label=\"Question Set\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        ...params.InputProps,\r\n        endAdornment: (\r\n          <React.Fragment>\r\n            {questionSetLoading ? <CircularProgress color=\"inherit\" size={10} /> : null}\r\n            {params.InputProps.endAdornment}\r\n          </React.Fragment>\r\n        ),\r\n      }}\r\n    />\r\n  )}\r\n/>\r\n</FormControl>\r\n<Button variant=\"contained\" color=\"primary\" onClick = {displayConfirmation} disabled = {startedExam}>Start</Button>\r\n<Dialog\r\n    open={openConfirmation}\r\n    onClose={closeConfirmation}\r\n    aria-labelledby=\"alert-dialog-title\"\r\n    aria-describedby=\"alert-dialog-description\"\r\n  >\r\n    <DialogTitle id=\"alert-dialog-title\">{\"Confirmation - Submission\"}</DialogTitle>\r\n    <DialogContent>\r\n      <DialogContentText id=\"alert-dialog-description\">Ary you sure to start the examination?</DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions>\r\n      <Button onClick={confirmExamStart} color=\"primary\">Confirm</Button>\r\n      <Button onClick={closeConfirmation} color=\"primary\" autoFocus>Cancel</Button>\r\n    </DialogActions>\r\n  </Dialog>\r\n\r\n    </div>\r\n  );\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\Question.js",["69"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport DisplayStatus from './DisplayStatus.js';\r\nimport DisplayTimer from './DisplayTimer.js';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n  },\r\n  root: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function Question(props) {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('');\r\n  const [error, setError] = React.useState(false);\r\n  const [helperText, setHelperText] = React.useState('Choose wisely');\r\n  const [questionIndex, setQuestionIndex] = React.useState(0);\r\n  const [questionAnswer,setQuestionAnswer] = React.useState(['']);\r\n  const [questionDetails, setQuestionDetails] = React.useState([]);\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  const [examCompleted,setExamCompleted] = React.useState(false);\r\n\r\n  const populateExamCompleteStatus =  (examStatus) => {\r\n     setExamCompleted(examStatus);\r\n     showAnswerStatus(questionAnswer[questionIndex]);\r\n  }\r\n\r\nReact.useEffect(() => {\r\n  fetch(\"https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getQuestionSet?questionSet=\" + props.questionSet)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        setQuestionDetails(result.questionList);\r\n        setIsLoaded(true);\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        setIsLoaded(false);\r\n        alert(error);\r\n        alert(\"https://pznmdvakt6.execute-api.ap-south-1.amazonaws.com/dev/getQuestionSet?questionSet=\" + props.questionSet);\r\n      }\r\n    )\r\n},[])\r\n\r\n\r\n  const prevNextQuestion = (event, newValue) => {\r\n    var curIndex = questionIndex;\r\n      if (newValue === 'next') {\r\n        if (questionIndex + 1 < questionDetails.length){\r\n          setQuestionIndex(questionIndex + 1);\r\n          curIndex = questionIndex + 1;\r\n        }\r\n      }\r\n      if (newValue === 'previous') {\r\n        if (questionIndex > 0){\r\n          setQuestionIndex(questionIndex - 1);\r\n          curIndex = questionIndex - 1;\r\n        }\r\n      }\r\n      if (questionAnswer.length === questionIndex) {\r\n        questionAnswer[questionIndex] = '';\r\n      }\r\n      if(examCompleted){\r\n      showAnswerStatus(questionAnswer[curIndex]);\r\n    }\r\n    };\r\n\r\n  const selectAnswer = (event) => {\r\n    setValue(event.target.value);\r\n    setHelperText(' ');\r\n    setError(false);\r\n    questionAnswer[questionIndex] = event.target.value;\r\n    setQuestionAnswer(questionAnswer)\r\n    var answered = 0;\r\n    for (var i = 0; i<questionAnswer.length ; i++){\r\n      if (questionAnswer[i] !== ''){\r\n        answered = answered + 1;\r\n      }\r\n    }\r\n    setProgress((answered/questionDetails.length)*100);\r\n\r\n  };\r\n\r\n  const showAnswerStatus = (value) => {\r\n    if (value === 'Y') {\r\n      setHelperText('Correct!');\r\n      setError(false);\r\n    } else if (value === 'N') {\r\n      setHelperText('Sorry, wrong answer!');\r\n      setError(true);\r\n    } else {\r\n      setHelperText('Please select an option.');\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  if (!isLoaded) {\r\n       return <div>Loading...</div>;\r\n     } else {\r\n    return (\r\n    <div className={classes.root}>\r\n    <DisplayTimer />\r\n    <LinearProgressWithLabel value={progress} />\r\n    <form>\r\n      <FormControl component=\"fieldset\" error={error} className={classes.formControl}>\r\n        <FormLabel component=\"legend\">{questionDetails[questionIndex].question}</FormLabel>\r\n        <RadioGroup  aria-label=\"quiz\" name=\"quiz\" value={questionAnswer[questionIndex]} onChange={selectAnswer}>\r\n        {questionDetails[questionIndex].options.map(({ id, correct,option }) => (\r\n        <React.Fragment key={id}>\r\n          <FormControlLabel value={correct} control={<Radio disabled = {examCompleted}/>} label={option} />\r\n          </React.Fragment>\r\n        ))}\r\n        </RadioGroup>\r\n        <FormHelperText>{helperText}</FormHelperText>\r\n        <DisplayStatus questionList = {questionDetails} currentIndex = {questionIndex} questionAnswer = {questionAnswer} setExamStatus = {populateExamCompleteStatus}/>\r\n      </FormControl>\r\n\r\n    </form>\r\n    <BottomNavigation value={value} onChange={prevNextQuestion} className={classes.root}>\r\n        <BottomNavigationAction label=\"Previous\" value=\"previous\" icon={<ArrowBackIosIcon />}/>\r\n        <BottomNavigationAction label=\"Next\" value=\"next\" icon={<ArrowForwardIosIcon />} />\r\n      </BottomNavigation>\r\n    </div>\r\n  );\r\n}\r\n}\r\n","C:\\academy\\academyexcellenceweb\\src\\DisplayTimer.js",[],"C:\\academy\\academyexcellenceweb\\src\\DisplayStatus.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":15,"column":8,"nodeType":"76","messageId":"77","endLine":15,"endColumn":17},{"ruleId":"74","severity":1,"message":"78","line":16,"column":8,"nodeType":"76","messageId":"77","endLine":16,"endColumn":20},{"ruleId":"74","severity":1,"message":"79","line":18,"column":8,"nodeType":"76","messageId":"77","endLine":18,"endColumn":11},{"ruleId":"74","severity":1,"message":"80","line":47,"column":10,"nodeType":"76","messageId":"77","endLine":47,"endColumn":23},{"ruleId":"74","severity":1,"message":"81","line":47,"column":25,"nodeType":"76","messageId":"77","endLine":47,"endColumn":41},{"ruleId":"82","severity":1,"message":"83","line":69,"column":4,"nodeType":"84","endLine":69,"endColumn":13,"suggestions":"85"},{"ruleId":"74","severity":1,"message":"86","line":34,"column":10,"nodeType":"76","messageId":"77","endLine":34,"endColumn":24},{"ruleId":"74","severity":1,"message":"87","line":35,"column":22,"nodeType":"76","messageId":"77","endLine":35,"endColumn":36},{"ruleId":"82","severity":1,"message":"88","line":110,"column":4,"nodeType":"84","endLine":110,"endColumn":13,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"90","line":89,"column":3,"nodeType":"84","endLine":89,"endColumn":5,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'TimerIcon' is defined but never used.","Identifier","unusedVar","'SettingsIcon' is defined but never used.","'App' is defined but never used.","'selectedClass' is assigned a value but never used.","'setSelectedClass' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'classList'. Either include it or remove the dependency array.","ArrayExpression",["94"],"'subjectDetails' is assigned a value but never used.","'setSubjectData' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'props.selectedBoard', 'props.selectedClass', and 'subjectData'. Either include them or remove the dependency array.",["95"],"React Hook React.useEffect has a missing dependency: 'props.questionSet'. Either include it or remove the dependency array.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [classList, loading]",{"range":"103","text":"104"},"Update the dependencies array to be: [loading, props.selectedBoard, props.selectedClass, subjectData]",{"range":"105","text":"106"},"Update the dependencies array to be: [props.questionSet]",{"range":"107","text":"108"},[2290,2299],"[classList, loading]",[3812,3821],"[loading, props.selectedBoard, props.selectedClass, subjectData]",[3292,3294],"[props.questionSet]"]